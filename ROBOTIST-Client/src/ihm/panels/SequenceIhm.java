package ihm.panels;

import beans.ActionSequence;
import beans.Sequence;
import ihm.CustomCellRenderer;
import ihm.ItfIhmSequenceIhm;
import java.util.ArrayList;
import java.util.Vector;
import ihm.popup.Popup;

public class SequenceIhm extends javax.swing.JPanel {

    private ItfIhmSequenceIhm refIhm;
    private boolean isRecording;
    private ArrayList<ActionSequence> allAction;
    private int index;

    public SequenceIhm(ItfIhmSequenceIhm ihm) {
        initComponents();
        this.refIhm = ihm;
        allAction = new ArrayList<ActionSequence>();
        enableSequenceBtn(false);
        delaySpin.setValue(1);
        listAction.setCellRenderer(new CustomCellRenderer());
        initList();

    }

    private void initList() {
        listSequence.addListSelectionListener(((lse) -> {
            if (!lse.getValueIsAdjusting()) {
                updateSelectedSequence();
            }
        }));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listSequence = new javax.swing.JList<>();
        playSequenceBtn = new javax.swing.JButton();
        saveSequenceBtn = new javax.swing.JButton();
        forwardBtn = new javax.swing.JButton();
        backwardBtn = new javax.swing.JButton();
        turnRightBtn = new javax.swing.JButton();
        turnLeftBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listAction = new javax.swing.JList<>();
        recordSequenceBtn = new javax.swing.JButton();
        delaySpin = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        homeBtn = new javax.swing.JButton();
        pictureBtn = new javax.swing.JButton();
        headUpBtn = new javax.swing.JButton();
        headDownBtn = new javax.swing.JButton();
        saveSequenceBtn1 = new javax.swing.JButton();

        jScrollPane1.setPreferredSize(new java.awt.Dimension(258, 430));

        listSequence.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(listSequence);

        playSequenceBtn.setText("Play Sequence");
        playSequenceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSequenceBtnActionPerformed(evt);
            }
        });

        saveSequenceBtn.setText("Save Sequence");
        saveSequenceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSequenceBtnActionPerformed(evt);
            }
        });

        forwardBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/robot_forward.png"))); // NOI18N
        forwardBtn.setMaximumSize(new java.awt.Dimension(60, 60));
        forwardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardBtnActionPerformed(evt);
            }
        });

        backwardBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/robot_backward.png"))); // NOI18N
        backwardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardBtnActionPerformed(evt);
            }
        });

        turnRightBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/robot_right.png"))); // NOI18N
        turnRightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnRightBtnActionPerformed(evt);
            }
        });

        turnLeftBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/robot_left.png"))); // NOI18N
        turnLeftBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnLeftBtnActionPerformed(evt);
            }
        });

        jScrollPane2.setPreferredSize(new java.awt.Dimension(258, 430));

        jScrollPane2.setViewportView(listAction);

        recordSequenceBtn.setText("Record Sequence");
        recordSequenceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordSequenceBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Delay (in seconds) :");

        homeBtn.setText("Home");
        homeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBtnActionPerformed(evt);
            }
        });

        pictureBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/camera.png"))); // NOI18N
        pictureBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pictureBtnActionPerformed(evt);
            }
        });

        headUpBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/robot_head_up.png"))); // NOI18N
        headUpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headUpBtnActionPerformed(evt);
            }
        });

        headDownBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/robot_head_down.png"))); // NOI18N
        headDownBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headDownBtnActionPerformed(evt);
            }
        });

        saveSequenceBtn1.setText("Cancel");
        saveSequenceBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSequenceBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(playSequenceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(recordSequenceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(saveSequenceBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(saveSequenceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(delaySpin, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(turnLeftBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(backwardBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(forwardBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(headUpBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(pictureBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(turnRightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(headDownBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(homeBtn))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(homeBtn)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playSequenceBtn)
                            .addComponent(recordSequenceBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveSequenceBtn1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveSequenceBtn)
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(forwardBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(turnRightBtn)
                                    .addComponent(turnLeftBtn)
                                    .addComponent(pictureBtn)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(headUpBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(headDownBtn)))
                        .addGap(8, 8, 8)
                        .addComponent(backwardBtn)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delaySpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void recordSequenceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordSequenceBtnActionPerformed
        allAction.clear();
        isRecording = true;
        enableSequenceBtn(true);
        recordSequenceBtn.setEnabled(false);


    }//GEN-LAST:event_recordSequenceBtnActionPerformed

    private void forwardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardBtnActionPerformed
        allAction.add(new ActionSequence("FWD", (int) delaySpin.getValue()));
        refreshActionList();
    }//GEN-LAST:event_forwardBtnActionPerformed

    private void turnLeftBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnLeftBtnActionPerformed
        allAction.add(new ActionSequence("LFT", (int) delaySpin.getValue()));
        refreshActionList();
    }//GEN-LAST:event_turnLeftBtnActionPerformed

    private void backwardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardBtnActionPerformed
        allAction.add(new ActionSequence("BWD", (int) delaySpin.getValue()));
        refreshActionList();
    }//GEN-LAST:event_backwardBtnActionPerformed

    private void turnRightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnRightBtnActionPerformed
        allAction.add(new ActionSequence("RGT", (int) delaySpin.getValue()));
        refreshActionList();
    }//GEN-LAST:event_turnRightBtnActionPerformed

    private void saveSequenceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSequenceBtnActionPerformed
        String name = Popup.askData("Name of the sequence");
        enableSequenceBtn(false);
        recordSequenceBtn.setEnabled(true);
        isRecording = false;
        refreshActionList();

        refIhm.createSequence(new Sequence(name, allAction));
    }//GEN-LAST:event_saveSequenceBtnActionPerformed

    private void homeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBtnActionPerformed
        refIhm.displayClientWindow();
    }//GEN-LAST:event_homeBtnActionPerformed

    private void pictureBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pictureBtnActionPerformed
        allAction.add(new ActionSequence("TPC"));
        refreshActionList();
    }//GEN-LAST:event_pictureBtnActionPerformed

    private void headDownBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headDownBtnActionPerformed
        allAction.add(new ActionSequence("HDD", (int) delaySpin.getValue()));
        refreshActionList();
    }//GEN-LAST:event_headDownBtnActionPerformed

    private void headUpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headUpBtnActionPerformed
        allAction.add(new ActionSequence("HDU", (int) delaySpin.getValue()));
        refreshActionList();
    }//GEN-LAST:event_headUpBtnActionPerformed

    private void playSequenceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSequenceBtnActionPerformed
        if (listSequence.getSelectedValue() != null) {
            refIhm.playSequence(listSequence.getSelectedValue());

        }
    }//GEN-LAST:event_playSequenceBtnActionPerformed

    private void saveSequenceBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSequenceBtn1ActionPerformed
        allAction.clear();
        refreshActionList();
        isRecording = false;
        enableSequenceBtn(false);
    }//GEN-LAST:event_saveSequenceBtn1ActionPerformed

    private void refreshActionList() {
        if (isRecording) {
            Vector actions = new Vector(allAction);
            listAction.setListData(actions);
        } else {
            if (listSequence.getSelectedValue() != null) {
                Vector actions = new Vector(listSequence.getSelectedValue().getActions());
                listAction.setListData(actions);
            }

        }

    }

    private void enableSequenceBtn(boolean enable) {
        forwardBtn.setEnabled(enable);
        backwardBtn.setEnabled(enable);
        turnLeftBtn.setEnabled(enable);
        turnRightBtn.setEnabled(enable);
        saveSequenceBtn.setEnabled(enable);
        pictureBtn.setEnabled(enable);
        headDownBtn.setEnabled(enable);
        headUpBtn.setEnabled(enable);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backwardBtn;
    private javax.swing.JSpinner delaySpin;
    private javax.swing.JButton forwardBtn;
    private javax.swing.JButton headDownBtn;
    private javax.swing.JButton headUpBtn;
    private javax.swing.JButton homeBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listAction;
    private javax.swing.JList<Sequence> listSequence;
    private javax.swing.JButton pictureBtn;
    private javax.swing.JButton playSequenceBtn;
    private javax.swing.JButton recordSequenceBtn;
    private javax.swing.JButton saveSequenceBtn;
    private javax.swing.JButton saveSequenceBtn1;
    private javax.swing.JButton turnLeftBtn;
    private javax.swing.JButton turnRightBtn;
    // End of variables declaration//GEN-END:variables

    public void arrowUp() {

        index -= 1;
        if (index < 0) {
            index = listSequence.getModel().getSize() - 1;
        }
        listSequence.setSelectedIndex(index);
    }

    public void arrowDown() {
        index += 1;
        if (index > listSequence.getModel().getSize() - 1) {
            index = 0;
        }
        listSequence.setSelectedIndex(index);
    }

    public void playSequence() {
        Sequence s = listSequence.getSelectedValue();
        if (s != null) {
            refIhm.playSequence(s);
        }
    }

    public void displaySequence(ArrayList<Sequence> sequenceToDisplay) {
        Vector allSequence = new Vector(sequenceToDisplay);
        listSequence.setListData(allSequence);
    }

    private void updateSelectedSequence() {
        ArrayList<String> actionInSequence = new ArrayList<>();
        if (listSequence == null) {
            return;
        }
        if(listSequence.getSelectedValue() == null){
            return;
        }
        for (ActionSequence action : listSequence.getSelectedValue().getActions()) {
            actionInSequence.add(action.getValue() + action.getDelay());
        }
        Vector actions = new Vector(actionInSequence);
        listAction.setListData(actions);

    }

    public void displayCurrentAction(int currentAction) {
        listAction.setSelectedIndex(currentAction);
    }

    public void clearIhm() {
        isRecording = false;
        enableSequenceBtn(false);
        allAction.clear();
        listAction.removeAll();
        listSequence.removeAll();

    }

}
